{
  "name": "passport-dropbox-oauth2",
  "version": "0.1.5",
  "description": "Dropbox OAuth 2.0 authentication strategy for Passport.",
  "keywords": [
    "passport",
    "dropbox",
    "oauth2",
    "auth",
    "authentication",
    "identity"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/florianheinemann/passport-dropbox-oauth2.git"
  },
  "bugs": {
    "url": "http://github.com/florianheinemann/passport-dropbox-oauth2/issues"
  },
  "author": {
    "name": "Florian Heinemann",
    "email": "florian.heinemann@gmail.com",
    "url": "https://twitter.com/florian__h/"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib/passport-dropbox-oauth2",
  "dependencies": {
    "pkginfo": "0.2.x",
    "passport-oauth": "0.1.*"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "readme": "# Passport-Dropbox-OAuth2\n\n[Passport](http://passportjs.org/) strategy for authenticating with [Dropbox](https://dropbox.com/)\nusing the OAuth 2.0 API.\n\nThis module lets you authenticate using Dropbox in your Node.js applications.\nBy plugging into Passport, Dropbox authentication can be easily and\nunobtrusively integrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Install\n\n    $ npm install passport-dropbox-oauth2\n\n## Usage\n\n#### Configure Strategy\n\nThe Dropbox authentication strategy authenticates users using a Dropbox account\nand OAuth 2.0 tokens.  The strategy requires a `verify` callback, which accepts\nthese credentials and calls `done` providing a user, as well as `options`\nspecifying a client ID, client secret, and callback URL.\n\n    passport.use(new DropboxOAuth2Strategy({\n        clientID: DROPBOX_CLIENT_ID,\n        clientSecret: DROPBOX_CLIENT_SECRET,\n        callbackURL: \"https://www.example.net/auth/dropbox-oauth2/callback\"\n      },\n      function(accessToken, refreshToken, profile, done) {\n        User.findOrCreate({ providerId: profile.id }, function (err, user) {\n          return done(err, user);\n        });\n      }\n    ));\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'dropbox-oauth2'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.get('/auth/dropbox',\n      passport.authenticate('dropbox-oauth2'));\n\n    app.get('/auth/dropbox/callback', \n      passport.authenticate('dropbox-oauth2', { failureRedirect: '/login' }),\n      function(req, res) {\n        // Successful authentication, redirect home.\n        res.redirect('/');\n      });\n\n## Examples\n\nExamples not yet provided\n\n## Tests\n\nTests not yet provided\n\n\n## Credits\n\n  - [Florian Heinemann](http://twitter.com/florian__h/)\n\n  This strategy is based on Jared Hanson's GitHub strategy for passport:  \n  - [Jared Hanson](http://github.com/jaredhanson)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2013-2014 Florian Heinemann <[http://twitter.com/florian__h/](http://twitter.com/florian__h/)>\n\n",
  "readmeFilename": "README.md",
  "_id": "passport-dropbox-oauth2@0.1.5",
  "dist": {
    "shasum": "aac13c70bc0debc689607b577762ab8c246e3459"
  },
  "_from": "passport-dropbox-oauth2@*",
  "_resolved": "https://registry.npmjs.org/passport-dropbox-oauth2/-/passport-dropbox-oauth2-0.1.5.tgz"
}
